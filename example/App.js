/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */
import 'react-native-gesture-handler';
import {NavigationContainer} from '@react-navigation/native';
import {createStackNavigator} from '@react-navigation/stack';

import React, {Component} from 'react';
import {StyleSheet, Text, View, Button, TextInput} from 'react-native';
import {
  CallManager,
  hasPermissions,
  SinchVoipEvents,
} from 'react-native-sinch-voip';
import {CallScreen} from './CallScreen';

const APPLICATION_KEY = '<YOUR-APPLICATION-KEY';
const APPLICATION_SECRET = '<YOUR-APPLICATION-SECRET>';
const HOST = 'sandbox.sinch.com'; // clientapi.sinch.com for production

const Stack = createStackNavigator();

export default () => {
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{headerShown: false}}>
        <Stack.Screen component={MainScreen} name="Main" />
        <Stack.Screen
          component={CallScreen}
          name="CallScreen"
          options={{animationEnabled: false}}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

class MainScreen extends Component {
  sinchEventEmitter = CallManager.eventEmitter;
  receiveIncomingCallListener = null;

  state = {
    userId: '',
    listening: false,
    userToCall: '',
  };

  componentDidMount() {
    const {navigation} = this.props;

    this.receiveIncomingCallListener = SinchVoipEvents.addListener(
      'receiveIncomingCall',
      async (call) => {
        if (hasPermissions()) {
          navigation.navigate('CallScreen', {
            incoming: true,
            camera: call.camera,
          });
        }
      },
    );
  }

  componentWillUnmount() {
    if (this.receiveIncomingCallListener) {
      this.receiveIncomingCallListener.remove();
    }
  }

  render() {
    const {navigation} = this.props;
    return (
      <View style={styles.container}>
        {!this.state.listening && (
          <>
            <Text style={styles.instructions}>
              Enter an unique id to receive call and then click on "Listen fo
              call"
            </Text>
            <TextInput
              style={{height: 40}}
              placeholder={'User ID'}
              onChangeText={(e) => {
                this.setState({userId: e});
              }}
            />
            <Button
              title="Listen for call"
              onPress={() => {
                CallManager.setupClient(
                  APPLICATION_KEY,
                  APPLICATION_SECRET,
                  HOST,
                  this.state.userId,
                );
                this.setState({listening: true});
              }}
            />
          </>
        )}

        {this.state.listening && (
          <>
            <Text style={styles.instructions}>
              You're listening with id: {this.state.userId}
            </Text>
            <TextInput
              style={{height: 40}}
              placeholder={'User ID to call'}
              onChangeText={(e) => {
                this.setState({userToCall: e});
              }}
            />
            <Button
              title="Call"
              onPress={() => {
                if (hasPermissions()) {
                  CallManager.callUserId(this.state.userToCall);
                  navigation.navigate('CallScreen', {
                    incoming: false,
                  });
                }
              }}
            />
            <Button
              title="Call with video"
              onPress={() => {
                if (hasPermissions()) {
                  CallManager.videoCallUserId(this.state.userToCall);
                  navigation.navigate('CallScreen', {
                    incoming: false,
                    camera: true,
                  });
                }
              }}
            />
            <Button
              title="Disconnect"
              color="red"
              onPress={() => {
                CallManager.stopListeningIncomingCalls();
                this.setState({
                  userId: '',
                  userToCall: '',
                  listening: false,
                });
              }}
            />
          </>
        )}
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
